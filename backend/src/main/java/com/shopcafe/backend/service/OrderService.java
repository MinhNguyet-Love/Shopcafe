//package com.shopcafe.backend.service;
//
//import com.shopcafe.backend.model.Order;
//import com.shopcafe.backend.model.OrderItem;
//import com.shopcafe.backend.model.Table;
//import com.shopcafe.backend.repo.OrderRepository;
//import com.shopcafe.backend.repo.TableRepository;
//import org.springframework.stereotype.Service;
//
//import java.util.List;
//import java.util.Optional;
//
//@Service
//public class OrderService {
//
//    private final OrderRepository orderRepo;
//    private final TableRepository tableRepo;
//
//    public OrderService(OrderRepository orderRepo, TableRepository tableRepo) {
//        this.orderRepo = orderRepo;
//        this.tableRepo = tableRepo;
//    }
//
//    public List<Order> all() {
//        return orderRepo.findAll();
//    }
//
//    public Optional<Order> findById(String id) {
//        return orderRepo.findById(id);
//    }
//
//    public List<Order> findByUser(String userId) {
//        return orderRepo.findByUserId(userId);
//    }
//
//    // ‚úÖ T·∫°o ƒë∆°n h√†ng m·ªõi (khi user ƒë·∫∑t)
//    public Order create(Order o) {
//        if (o.getTableId() == null) throw new RuntimeException("Thi·∫øu th√¥ng tin b√†n!");
//        if (o.getItems() == null || o.getItems().isEmpty()) throw new RuntimeException("Ch∆∞a ch·ªçn m√≥n!");
//
//        o.setStatus("ƒêang ph·ª•c v·ª•");
//
//        double total = 0.0;
//        for (OrderItem it : o.getItems()) {
//            total += it.getUnitPrice() * it.getQuantity();
//        }
//        o.setTotalPrice(total);
//
//        // ‚úÖ C·∫≠p nh·∫≠t b√†n sang "C√ì KH√ÅCH"
//        Table table = tableRepo.findById(o.getTableId())
//                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y b√†n!"));
//        table.setStatus("C√ì KH√ÅCH");
//        tableRepo.save(table);
//
//        return orderRepo.save(o);
//    }
//
//    // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n (Admin)
//    public Optional<Order> updateStatus(String id, String status) {
//        return orderRepo.findById(id).map(order -> {
//            order.setStatus(status);
//            orderRepo.save(order);
//
//            // ‚úÖ N·∫øu thanh to√°n xong ‚Üí b√†n tr·ªü l·∫°i "TR·ªêNG"
//            if ("ƒê√£ thanh to√°n".equalsIgnoreCase(status)) {
//                Table table = tableRepo.findById(order.getTableId())
//                        .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y b√†n!"));
//                table.setStatus("TR·ªêNG");
//                tableRepo.save(table);
//            }
//
//            return order;
//        });
//    }
//
//    public boolean delete(String id) {
//        if (orderRepo.existsById(id)) {
//            orderRepo.deleteById(id);
//            return true;
//        }
//        return false;
//    }
//}
package com.shopcafe.backend.service;

import com.shopcafe.backend.model.Order;
import com.shopcafe.backend.model.OrderItem;
import com.shopcafe.backend.model.Table;
import com.shopcafe.backend.repo.OrderRepository;
import com.shopcafe.backend.repo.TableRepository;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Service
public class OrderService {

    private final OrderRepository orderRepo;
    private final TableRepository tableRepo;

    public OrderService(OrderRepository orderRepo, TableRepository tableRepo) {
        this.orderRepo = orderRepo;
        this.tableRepo = tableRepo;
    }

    public List<Order> all() {
        return orderRepo.findAll();
    }

    public Optional<Order> findById(String id) {
        return orderRepo.findById(id);
    }

    public List<Order> findByUser(String userId) {
        return orderRepo.findByUserId(userId);
    }

    public Order save(Order o) {
        return orderRepo.save(o);
    }

    // ‚úÖ T·∫°o ƒë∆°n h√†ng m·ªõi (khi user ƒë·∫∑t)
    public Order create(Order o) {
        if (o.getTableId() == null) throw new RuntimeException("Thi·∫øu th√¥ng tin b√†n!");
        if (o.getItems() == null || o.getItems().isEmpty())
            throw new RuntimeException("Ch∆∞a ch·ªçn m√≥n!");

        // üü§ L·∫•y th√¥ng tin b√†n
        Table table = tableRepo.findById(o.getTableId())
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y b√†n!"));

        // ‚úÖ N·∫øu frontend g·ª≠i tableName r·ªóng th√¨ t·ª± l·∫•y t·ª´ table
        if (o.getTableName() == null || o.getTableName().isBlank()) {
            o.setTableName(table.getName());
        }

        // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i b√†n
        table.setStatus("C√ì KH√ÅCH");
        tableRepo.save(table);

        // ‚úÖ T√≠nh t·ªïng ti·ªÅn t·ª´ danh s√°ch m√≥n
        double total = 0.0;
        for (OrderItem it : o.getItems()) {
            total += it.getUnitPrice() * it.getQuantity();
        }
        o.setTotalPrice(total);

        // ‚úÖ G√°n tr·∫°ng th√°i v√† ng√†y gi·ªù
        o.setStatus("ƒêang ph·ª•c v·ª•");
        o.setBusinessDate(LocalDate.now());
        o.setCreatedAt(LocalDateTime.now().toString());

        return orderRepo.save(o);
    }

    // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n (Admin)
    public Optional<Order> updateStatus(String id, String status) {
        return orderRepo.findById(id).map(order -> {
            order.setStatus(status);
            orderRepo.save(order);

            // ‚úÖ N·∫øu thanh to√°n xong ‚Üí b√†n tr·ªü l·∫°i "TR·ªêNG"
            if (status != null && status.toLowerCase().contains("ƒë√£ thanh to√°n")) {

                Table table = tableRepo.findById(order.getTableId())
                        .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y b√†n!"));
                table.setStatus("TR·ªêNG");
                tableRepo.save(table);
            }

            return order;
        });
    }

    public boolean delete(String id) {
        if (orderRepo.existsById(id)) {
            orderRepo.deleteById(id);
            return true;
        }
        return false;
    }
}
