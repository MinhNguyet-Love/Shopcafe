package com.shopcafe.backend.service;

import io.jsonwebtoken.*;
import io.jsonwebtoken.security.Keys;
import org.springframework.stereotype.Service;

import java.security.Key;
import java.util.Date;
import java.util.Map;


@Service
public class JwtService {

    // üîë Kho√° b√≠ m·∫≠t (ph·∫£i d√†i t·ªëi thi·ªÉu 32 k√Ω t·ª±)
    private static final String SECRET_KEY = "supersecretkey123456789supersecretkey123456789";

    private Key getSignKey() {
        return Keys.hmacShaKeyFor(SECRET_KEY.getBytes());
    }

    /**
     * ‚úÖ Sinh token ch·ª©a email v√† quy·ªÅn (role)
     * @param email email c·ªßa user
     * @param role quy·ªÅn (ADMIN / USER)
     * @return JWT token
     */
    public String generateToken(String email, String role) {
        // üü¢ Th√™m ti·ªÅn t·ªë ROLE_ n·∫øu ch∆∞a c√≥ (ƒë·ªÉ ƒë·ªìng b·ªô v·ªõi Spring Security)
        String fixedRole = role.startsWith("ROLE_") ? role : "ROLE_" + role;

        return Jwts.builder()
                .setSubject(email)
                .addClaims(Map.of("role", fixedRole))
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 24)) // 24h
                .signWith(getSignKey(), SignatureAlgorithm.HS256)
                .compact();
    }

    /**
     * ‚úÖ Tr√≠ch xu·∫•t email (subject) t·ª´ token
     */
    public String extractEmail(String token) {
        try {
            return extractAllClaims(token).getSubject();
        } catch (JwtException e) {
            return null;
        }
    }

    /**
     * ‚úÖ Ki·ªÉm tra token h·ª£p l·ªá (ƒë√∫ng email v√† ch∆∞a h·∫øt h·∫°n)
     */
    public boolean isValid(String token, String email) {
        String extractedEmail = extractEmail(token);
        return extractedEmail != null && extractedEmail.equals(email) && !isExpired(token);
    }

    /**
     * ‚úÖ Ki·ªÉm tra token h·∫øt h·∫°n ch∆∞a
     */
    private boolean isExpired(String token) {
        return extractAllClaims(token).getExpiration().before(new Date());
    }

    /**
     * ‚úÖ Gi·∫£i m√£ to√†n b·ªô claims t·ª´ token
     */
    private Claims extractAllClaims(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(getSignKey())
                .build()
                .parseClaimsJws(token)
                .getBody();
    }
}
